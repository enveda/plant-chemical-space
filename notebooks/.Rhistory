"ESN004_5w",
"ESN004_5w",
"ESN004_5w",
"ESN004_5w",
"ESN004_5w",
"ESN004_5w"
))
summary(Y)
results <- block.splsda(
X=X,
Y=Y,
)
# PCA plot
plotIndiv(
results,
legend = TRUE,
ellipse = TRUE,
X.label = 'PLS-DA 1',
Y.label = 'PLS-DA 2'
)
plotArrow(
results,
ind.names = FALSE,
legend = TRUE,
title = 'DIABLO',
arrow.size=0,
arrow.length=0,
arrow.alpha=0.0
)
results <- block.splsda(
X=X,
Y=Y,
)
Y <- factor(c(
"control",
"control",
"control",
"control",
"control",
"STZ+HFD",
"STZ+HFD",
"STZ+HFD",
"STZ+HFD",
"ESN264",
"ESN264",
"ESN264",
"ESN264",
"ESN264",
"ESN004",
"ESN004",
"ESN004",
"ESN004",
"ESN004",
"ESN264_5w",
"ESN264_5w",
"ESN264_5w",
"ESN264_5w",
"ESN264_5w",
"ESN004_5w",
"ESN004_5w",
"ESN004_5w",
"ESN004_5w",
"ESN004_5w",
"ESN004_5w"
))
summary(Y)
results <- block.splsda(
X=X,
Y=Y,
)
# Join omics modalities
X <- list(
metabolomics = metabolomics,
proteomics = proteomics
)
View(X)
View(X[["metabolomics"]])
View(X[["proteomics"]])
results <- block.splsda(
X=X,
Y=Y,
)
library(mixOmics)
metabolomics = read.csv(
file = '/Users/danieldomingo/PycharmProjects/platform/multiomics-daniel/asms_poster_04_2023/metabolomics_prepared.tsv',
sep = '\t',
header = TRUE,
row.names = 1,
)
metabolomics <- as.matrix(metabolomics)
proteomics = read.csv(
file = '/Users/danieldomingo/PycharmProjects/platform/multiomics-daniel/asms_poster_04_2023/proteomics_prepared.tsv',
sep = '\t',
header = TRUE,
row.names = 1,
)
proteomics <- as.matrix(proteomics)
# Join omics modalities
X <- list(
metabolomics = metabolomics,
proteomics = proteomics
)
Y <- factor(c(
"control",
"control",
"control",
"control",
"control",
"STZ+HFD",
"STZ+HFD",
"STZ+HFD",
"STZ+HFD",
"ESN264",
"ESN264",
"ESN264",
"ESN264",
"ESN264",
"ESN004",
"ESN004",
"ESN004",
"ESN004",
"ESN004",
"ESN264_5w",
"ESN264_5w",
"ESN264_5w",
"ESN264_5w",
"ESN264_5w",
"ESN004_5w",
"ESN004_5w",
"ESN004_5w",
"ESN004_5w",
"ESN004_5w",
"ESN004_5w"
))
summary(Y)
results <- block.splsda(
X=X,
Y=Y,
)
# PCA plot
plotIndiv(
results,
legend = TRUE,
ellipse = TRUE,
X.label = 'PLS-DA 1',
Y.label = 'PLS-DA 2'
)
results <- block.splsda(
X=X,
Y=Y,
)
metabolomics = read.csv(
file = '/Users/danieldomingo/PycharmProjects/platform/multiomics-daniel/asms_poster_04_2023/metabolomics_prepared.tsv',
sep = '\t',
header = TRUE,
row.names = 1,
)
metabolomics <- as.matrix(metabolomics)
proteomics = read.csv(
file = '/Users/danieldomingo/PycharmProjects/platform/multiomics-daniel/asms_poster_04_2023/proteomics_prepared.tsv',
sep = '\t',
header = TRUE,
row.names = 1,
)
proteomics <- as.matrix(proteomics)
# Join omics modalities
X <- list(
metabolomics = metabolomics,
proteomics = proteomics
)
Y <- factor(c(
"control",
"control",
"control",
"control",
"control",
"STZ+HFD",
"STZ+HFD",
"STZ+HFD",
"STZ+HFD",
"ESN264",
"ESN264",
"ESN264",
"ESN264",
"ESN264",
"ESN004",
"ESN004",
"ESN004",
"ESN004",
"ESN004",
"ESN264_5w",
"ESN264_5w",
"ESN264_5w",
"ESN264_5w",
"ESN264_5w",
"ESN004_5w",
"ESN004_5w",
"ESN004_5w",
"ESN004_5w",
"ESN004_5w",
"ESN004_5w"
))
summary(Y)
results <- block.splsda(
X=X,
Y=Y,
)
# PCA plot
plotIndiv(
results,
legend = TRUE,
ellipse = TRUE,
X.label = 'PLS-DA 1',
Y.label = 'PLS-DA 2'
)
# https://mixomics-users.discourse.group/t/unexpected-correlations-compared-to-expression-lines-in-diablo-circosplot/389/3
corMat <-  circosPlot(
results,
cutoff=0.97,
size.legend = 0.6,
line=TRUE
)
# https://mixomics-users.discourse.group/t/unexpected-correlations-compared-to-expression-lines-in-diablo-circosplot/389/3
corMat <-  circosPlot(
results,
cutoff=0.90,
size.legend = 0.6,
line=TRUE
)
# https://mixomics-users.discourse.group/t/unexpected-correlations-compared-to-expression-lines-in-diablo-circosplot/389/3
corMat <-  circosPlot(
results,
cutoff=0.95,
size.legend = 0.6,
line=TRUE
)
# https://mixomics-users.discourse.group/t/unexpected-correlations-compared-to-expression-lines-in-diablo-circosplot/389/3
corMat <-  circosPlot(
results,
cutoff=0.94,
size.legend = 0.6,
line=TRUE
)
# https://mixomics-users.discourse.group/t/unexpected-correlations-compared-to-expression-lines-in-diablo-circosplot/389/3
corMat <-  circosPlot(
results,
cutoff=0.95,
size.legend = 0.6,
line=TRUE
)
# https://mixomics-users.discourse.group/t/unexpected-correlations-compared-to-expression-lines-in-diablo-circosplot/389/3
corMat <-  circosPlot(
results,
cutoff=0.96,
size.legend = 0.6,
line=TRUE
)
# https://mixomics-users.discourse.group/t/unexpected-correlations-compared-to-expression-lines-in-diablo-circosplot/389/3
corMat <-  circosPlot(
results,
cutoff=0.95,
size.legend = 0.6,
line=TRUE
)
# https://mixomics-users.discourse.group/t/unexpected-correlations-compared-to-expression-lines-in-diablo-circosplot/389/3
corMat <-  circosPlot(
results,
cutoff=0.95,
line=TRUE
)
# https://mixomics-users.discourse.group/t/unexpected-correlations-compared-to-expression-lines-in-diablo-circosplot/389/3
corMat <-  circosPlot(
results,
cutoff=0.70,
line=TRUE
)
library(ggtreeExtra)
library(ggtree)
library(treeio)
library(tidytree)
library(ggstar)
library(ggplot2)
library(ggnewscale)
library(reshape)
setwd("~/Downloads/plant-chemical-space/notebooks/")
tree <- read.newick("../data/taxonomy_tree_1A.nwk")
dat2 <- read.csv(
"../data/overview_chemicals_family.tsv",
sep = "\t",
header = TRUE,
row.names = 1,
fill = TRUE
)
View(dat2)
dat2$rowname <- rownames(dat2)
dat2 <- melt(dat2) # melting helps with plotting in geom_fruit()
nodeids <- nodeid(tree, tree$node.label)
nodedf <- data.frame(node = nodeids)
labdf <-
data.frame(node = nodeids, label = tree$node.label)
# The circular layout tree.
p <-
ggtree(
tree,
layout = "fan",
# comment out for rectangular graph
branch.length = 'none',
size = 0.1,
# line thickness
open.angle = 10
) + # gives it a nice gap
geom_tiplab(# align = TRUE, # only use if you need dotted / dashed lines from label to heatmap column
geom = 'text',
size = 0.5,
# text size of labels
offset = 0.04) + # of the labels from the tree)
new_scale_fill() +
geom_fruit(
# lets you map whatever plot to a histogram
data = dat2,
geom = geom_tile,
# basically a heat map
mapping = aes(
y = rowname,
x = variable,
fill = variable,
alpha = value
),
# if you set fill = "variable", then each column gets a different color
color = "#666666",
# of the bounding boxes in the grid
offset = 0.07,
# of the heat map from the
size = 0.02,
# width of lines
# lwd = 0.1, # line width
axis.params = list(
line.size = 0,
vjust = 0,
hjust = 1
)
) +
scale_fill_manual(
values = c(
'#4c72b0',
'#c44e52',
'#55a868'
),
guide = guide_legend(
keywidth = 0.3,
keyheight = 0.3,
order = 4
)
)
p
# colors from seaborn's "deep" color palette (python)
pal = c(
'#4c72b0',
'#dd8452',
'#55a868',
'#c44e52',
'#8172b3',
'#937860',
'#da8bc3',
'#8c8c8c',
'#ccb974',
'#64b5cd'
)
library(svglite)
ggsave(
"fig_1_a_open_angle_10.svg",
#infinite zoom; good for editing in illustrator
plot = p,
width = 12,
height = 12,
units = 'in',
dpi = 300 # good for publishing
)
# The circular layout tree.
p <-
ggtree(
tree,
layout = "fan",
# comment out for rectangular graph
branch.length = 'none',
size = 0.1,
# line thickness
open.angle = 10
) + # gives it a nice gap
geom_tiplab(# align = TRUE, # only use if you need dotted / dashed lines from label to heatmap column
geom = 'text',
size = 0.5,
# text size of labels
offset = 0.04) + # of the labels from the tree)
new_scale_fill() +
geom_fruit(
# lets you map whatever plot to a histogram
data = dat2,
geom = geom_tile,
# basically a heat map
mapping = aes(
y = rowname,
x = variable,
fill = variable,
alpha = value
),
# if you set fill = "variable", then each column gets a different color
color = "#666666",
# of the bounding boxes in the grid
offset = 0.07,
# of the heat map from the
size = 0.02,
# width of lines
# lwd = 0.1, # line width
axis.params = list(
line.size = 0,
vjust = 0,
hjust = 1
)
) +
scale_fill_manual(
values = c(
'#4c72b0',
'#c44e52',
'#55a868',
'#f77b0e',
),
guide = guide_legend(
keywidth = 0.3,
keyheight = 0.3,
order = 4
)
)
# The circular layout tree.
p <-
ggtree(
tree,
layout = "fan",
# comment out for rectangular graph
branch.length = 'none',
size = 0.1,
# line thickness
open.angle = 10
) + # gives it a nice gap
geom_tiplab(# align = TRUE, # only use if you need dotted / dashed lines from label to heatmap column
geom = 'text',
size = 0.5,
# text size of labels
offset = 0.04) + # of the labels from the tree)
new_scale_fill() +
geom_fruit(
# lets you map whatever plot to a histogram
data = dat2,
geom = geom_tile,
# basically a heat map
mapping = aes(
y = rowname,
x = variable,
fill = variable,
alpha = value
),
# if you set fill = "variable", then each column gets a different color
color = "#666666",
# of the bounding boxes in the grid
offset = 0.07,
# of the heat map from the
size = 0.02,
# width of lines
# lwd = 0.1, # line width
axis.params = list(
line.size = 0,
vjust = 0,
hjust = 1
)
) +
scale_fill_manual(
values = c(
'#4c72b0',
'#c44e52',
'#55a868',
'#f77b0e'
),
guide = guide_legend(
keywidth = 0.3,
keyheight = 0.3,
order = 4
)
)
p
# colors from seaborn's "deep" color palette (python)
pal = c(
'#4c72b0',
'#dd8452',
'#55a868',
'#c44e52',
'#8172b3',
'#937860',
'#da8bc3',
'#8c8c8c',
'#ccb974',
'#64b5cd'
)
library(svglite)
ggsave(
"fig_1_a_open_angle_10.svg",
#infinite zoom; good for editing in illustrator
plot = p,
width = 12,
height = 12,
units = 'in',
dpi = 300 # good for publishing
)
